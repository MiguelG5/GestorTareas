{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TareaService {\n  constructor(http) {\n    this.http = http;\n    this.URL_API = 'http://localhost:4000/api/tareas';\n    this.selectedTarea = {\n      datosCompartidos: '',\n      tareaDatosEspecifico: '',\n      fechaTerminacion: ''\n    };\n    this.tareas = []; // Declara la propiedad 'tareas' aquí\n  }\n\n  getNombresDeTareas() {\n    return this.getTareas().pipe(map(tareas => [''].concat(tareas.map(tarea => tarea.datosCompartidos))));\n  }\n  getTareas() {\n    return this.http.get(this.URL_API).pipe(map(tareas => tareas.map(tarea => ({\n      ...tarea,\n      actividad: {\n        nombre: tarea.datosCompartidos,\n        duracion: tarea.tareaDatosEspecifico\n      } // Adaptación para Flyweight\n    }))));\n  }\n\n  createTarea(tarea) {\n    // Aquí puedes enviar solo los datos necesarios para crear la tarea en el servidor\n    const tareaParaCrear = {\n      datosCompartidos: tarea.datosCompartidos,\n      tareaDatosEspecifico: tarea.tareaDatosEspecifico,\n      fechaTerminacion: tarea.fechaTerminacion\n    };\n    return this.http.post(this.URL_API, tareaParaCrear);\n  }\n  putTarea(tarea) {\n    // Similar a createTarea, ajusta según sea necesario\n    return this.http.put(`${this.URL_API}/${tarea.idActividad}`, tarea);\n  }\n  deleteTarea(idActividad) {\n    return this.http.delete(`${this.URL_API}/${idActividad}`);\n  }\n  static #_ = this.ɵfac = function TareaService_Factory(t) {\n    return new (t || TareaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TareaService,\n    factory: TareaService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","TareaService","constructor","http","URL_API","selectedTarea","datosCompartidos","tareaDatosEspecifico","fechaTerminacion","tareas","getNombresDeTareas","getTareas","pipe","concat","tarea","get","actividad","nombre","duracion","createTarea","tareaParaCrear","post","putTarea","put","idActividad","deleteTarea","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mikey\\Documents\\Proyectos\\BoxTrainer\\Front-End\\src\\app\\services\\tarea.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Tarea } from '../models/tareas';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TareaService {\n\n  URL_API = 'http://localhost:4000/api/tareas';\n\n  selectedTarea: Tarea = { datosCompartidos: '', tareaDatosEspecifico: '', fechaTerminacion: '' };\n  tareas: Tarea[] = []; // Declara la propiedad 'tareas' aquí\n\n  constructor(private http: HttpClient) { }\n\n  getNombresDeTareas(): Observable<string[]> {\n    return this.getTareas().pipe(\n      map(tareas => [''].concat(tareas.map(tarea => tarea.datosCompartidos)))\n    );\n  }\n\n  getTareas(): Observable<Tarea[]> {\n    return this.http.get<Tarea[]>(this.URL_API).pipe(\n      map(tareas => tareas.map(tarea => ({\n        ...tarea,\n        actividad: { nombre: tarea.datosCompartidos, duracion: tarea.tareaDatosEspecifico } // Adaptación para Flyweight\n      } as Tarea)))\n    );\n  }\n\n  createTarea(tarea: Tarea): Observable<any> {\n    // Aquí puedes enviar solo los datos necesarios para crear la tarea en el servidor\n    const tareaParaCrear = {\n      datosCompartidos: tarea.datosCompartidos,\n      tareaDatosEspecifico: tarea.tareaDatosEspecifico,\n      fechaTerminacion: tarea.fechaTerminacion\n    };\n  \n    return this.http.post(this.URL_API, tareaParaCrear);\n  }\n  \n\n  putTarea(tarea: Tarea): Observable<any> {\n    // Similar a createTarea, ajusta según sea necesario\n    return this.http.put(`${this.URL_API}/${tarea.idActividad}`, tarea);\n  }\n\n  deleteTarea(idActividad: number): Observable<any> {\n    return this.http.delete(`${this.URL_API}/${idActividad}`);\n  }\n}\n"],"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALxB,KAAAC,OAAO,GAAG,kCAAkC;IAE5C,KAAAC,aAAa,GAAU;MAAEC,gBAAgB,EAAE,EAAE;MAAEC,oBAAoB,EAAE,EAAE;MAAEC,gBAAgB,EAAE;IAAE,CAAE;IAC/F,KAAAC,MAAM,GAAY,EAAE,CAAC,CAAC;EAEkB;;EAExCC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACC,SAAS,EAAE,CAACC,IAAI,CAC1BZ,GAAG,CAACS,MAAM,IAAI,CAAC,EAAE,CAAC,CAACI,MAAM,CAACJ,MAAM,CAACT,GAAG,CAACc,KAAK,IAAIA,KAAK,CAACR,gBAAgB,CAAC,CAAC,CAAC,CACxE;EACH;EAEAK,SAASA,CAAA;IACP,OAAO,IAAI,CAACR,IAAI,CAACY,GAAG,CAAU,IAAI,CAACX,OAAO,CAAC,CAACQ,IAAI,CAC9CZ,GAAG,CAACS,MAAM,IAAIA,MAAM,CAACT,GAAG,CAACc,KAAK,KAAK;MACjC,GAAGA,KAAK;MACRE,SAAS,EAAE;QAAEC,MAAM,EAAEH,KAAK,CAACR,gBAAgB;QAAEY,QAAQ,EAAEJ,KAAK,CAACP;MAAoB,CAAE,CAAC;KAC3E,EAAC,CAAC,CACd;EACH;;EAEAY,WAAWA,CAACL,KAAY;IACtB;IACA,MAAMM,cAAc,GAAG;MACrBd,gBAAgB,EAAEQ,KAAK,CAACR,gBAAgB;MACxCC,oBAAoB,EAAEO,KAAK,CAACP,oBAAoB;MAChDC,gBAAgB,EAAEM,KAAK,CAACN;KACzB;IAED,OAAO,IAAI,CAACL,IAAI,CAACkB,IAAI,CAAC,IAAI,CAACjB,OAAO,EAAEgB,cAAc,CAAC;EACrD;EAGAE,QAAQA,CAACR,KAAY;IACnB;IACA,OAAO,IAAI,CAACX,IAAI,CAACoB,GAAG,CAAC,GAAG,IAAI,CAACnB,OAAO,IAAIU,KAAK,CAACU,WAAW,EAAE,EAAEV,KAAK,CAAC;EACrE;EAEAW,WAAWA,CAACD,WAAmB;IAC7B,OAAO,IAAI,CAACrB,IAAI,CAACuB,MAAM,CAAC,GAAG,IAAI,CAACtB,OAAO,IAAIoB,WAAW,EAAE,CAAC;EAC3D;EAAC,QAAAG,CAAA,G;qBA3CU1B,YAAY,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ/B,YAAY;IAAAgC,OAAA,EAAZhC,YAAY,CAAAiC,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}